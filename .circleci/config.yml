version: 2.1

jobs:
  build_and_test:
    docker:
      - image: cimg/node:18.19
    steps:
      - checkout

      # Optional: install any root-level package.json dependencies
      - run:
          name: Install root dependencies
          command: |
            npm ci || echo "No root-level package.json found, skipping."

      # Build server
      - run:
          name: Install & build server
          command: |
            cd server
            npm ci
            npm run build

      # Build client
      - run:
          name: Install & build client
          command: |
            cd client
            npm ci
            npm run build -- --configuration=production

  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      # Install zip and jq for EB operations
      - run:
          name: Install dependencies
          command: |
            yum install -y jq zip

      # Configure AWS credentials
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region=$AWS_REGION" >> ~/.aws/config

      # Create env.json in the project root
      - run:
          name: Create environment variables file
          command: |
            echo '[{"Namespace":"aws:elasticbeanstalk:application:environment","OptionName":"DB_HOST","Value":"'"$DB_HOST"'"},
                  {"Namespace":"aws:elasticbeanstalk:application:environment","OptionName":"DB_NAME","Value":"'"$DB_NAME"'"},
                  {"Namespace":"aws:elasticbeanstalk:application:environment","OptionName":"DB_USER","Value":"'"$DB_USER"'"},
                  {"Namespace":"aws:elasticbeanstalk:application:environment","OptionName":"DB_PASSWORD","Value":"'"$DB_PASSWORD"'"},
                  {"Namespace":"aws:elasticbeanstalk:application:environment","OptionName":"JWT_SECRET","Value":"'"$JWT_SECRET"'"},
                  {"Namespace":"aws:elasticbeanstalk:application:environment","OptionName":"PORT","Value":"'"$PORT"'"}]' > env.json

      # Deploy the server and update EB environment
      - run:
          name: Deploy backend to Elastic Beanstalk
          no_output_timeout: 30m
          command: |
            # Zip server code
            cd server
            zip -r deploy.zip .
            aws s3 cp deploy.zip s3://$FRONTEND_S3_BUCKET/deploy.zip
            cd ..

            # Create a new EB application version
            VERSION_LABEL="deploy-$(date +%s)"
            aws elasticbeanstalk create-application-version \
              --application-name SpiceStory-Server \
              --version-label "$VERSION_LABEL" \
              --source-bundle S3Bucket=$FRONTEND_S3_BUCKET,S3Key=deploy.zip \
              --region $AWS_REGION

            # Update environment (new version + environment variables)
            echo "Updating environment with new version and env vars..."
            aws elasticbeanstalk update-environment \
              --environment-name SpiceStory-env \
              --application-name SpiceStory-Server \
              --version-label "$VERSION_LABEL" \
              --option-settings file://env.json \
              --region $AWS_REGION

            # Poll for the application version to be 'Processed'
            TIMEOUT=1200
            INTERVAL=30
            ELAPSED=0
            while true; do
              STATUS=$(aws elasticbeanstalk describe-application-versions \
                --application-name SpiceStory-Server \
                --version-label "$VERSION_LABEL" \
                --query "ApplicationVersions[0].Status" \
                --output text \
                --region $AWS_REGION)
              echo "AppVersion Status: $STATUS (elapsed: $ELAPSED s)"
              if [ "$STATUS" == "Processed" ]; then
                echo "Application version processed."
                break
              fi
              if [ $ELAPSED -ge $TIMEOUT ]; then
                echo "Timeout waiting for version to be processed."
                exit 1
              fi
              sleep $INTERVAL
              ((ELAPSED+=INTERVAL))
            done

            # Poll for the environment to reach 'Ready' status
            ELAPSED=0
            while true; do
              ENV_STATUS=$(aws elasticbeanstalk describe-environments \
                --environment-names SpiceStory-env \
                --query 'Environments[0].Status' \
                --output text \
                --region $AWS_REGION)
              echo "Environment Status: $ENV_STATUS (elapsed: $ELAPSED s)"
              if [ "$ENV_STATUS" == "Ready" ]; then
                echo "Environment is Ready."
                break
              fi
              if [ $ELAPSED -ge $TIMEOUT ]; then
                echo "Timeout waiting for environment to become Ready."
                exit 1
              fi
              sleep $INTERVAL
              ((ELAPSED+=INTERVAL))
            done

      # Deploy the client build to S3
      - run:
          name: Deploy frontend to S3
          command: |
            aws s3 sync client/dist/spicestory s3://$FRONTEND_S3_BUCKET --delete

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test
          filters:
            branches:
              only: main