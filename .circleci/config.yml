version: 2.1

jobs:
  build_and_test:
    docker:
      - image: cimg/node:18.19
    steps:
      - checkout

      # Install root-level dependencies
      - run:
          name: Install root dependencies
          command: |
            npm install || echo "No root-level package.json found, skipping."

      # Build & Test the Backend
      - run:
          name: Backend install and build
          command: |
            cd server
            npm install
            npm install -g typescript  # Ensure TypeScript is installed
            npm run build

      # Build & Test the Frontend
      - run:
          name: Frontend install and build
          command: |
            cd client
            npm install
            npm run build -- --configuration=production

  deploy:
    docker:
      - image: amazon/aws-cli  # ✅ Pre-installed AWS CLI
    steps:
      - checkout

      # Set AWS Credentials
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/config
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
            echo "region=$AWS_REGION" >> ~/.aws/config

      # Deploy Backend to Elastic Beanstalk
      - run:
          name: Deploy to AWS Elastic Beanstalk
          command: |
            cd server
            eb init SpiceStory-Server --platform node.js --region $AWS_REGION
            eb setenv AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                      AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                      AWS_REGION=$AWS_REGION \
                      DB_HOST=$DB_HOST \
                      DB_NAME=$DB_NAME \
                      DB_USER=$DB_USER \
                      DB_PASSWORD=$DB_PASSWORD \
                      JWT_SECRET=$JWT_SECRET \
                      DB_PORT=$DB_PORT \
                      PORT=5001  # Ensure application listens on port 5001
            nohup eb deploy &  # Prevent CircleCI from timing out

            echo "Waiting for deployment to complete..."
            TIMEOUT=1800  # 30 minutes
            INTERVAL=30
            ELAPSED=0
            while true; do
              STATUS=$(eb health | grep -i "Green")
              if [[ ! -z "$STATUS" ]]; then
                echo "✅ Elastic Beanstalk environment is healthy."
                break
              fi

              if [[ $ELAPSED -ge $TIMEOUT ]]; then
                echo "❌ Timeout reached ($TIMEOUT seconds). Exiting."
                exit 1
              fi

              echo "Checking health again in ${INTERVAL}s..."
              sleep $INTERVAL  
              ((ELAPSED+=INTERVAL))
            done

      # Deploy Frontend to S3
      - run:
          name: Deploy Frontend to S3
          command: |
            aws s3 sync client/dist/spicestory s3://$FRONTEND_S3_BUCKET --delete

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test
          filters:
            branches:
              only: main